‚úÖ PART 1: Getting Started (Zero Level)
üîß Step 1: Install ArduinoJson Library
Open Arduino IDE.

Go to Sketch ‚Üí Include Library ‚Üí Manage Libraries‚Ä¶

Search for ‚ÄúArduinoJson‚Äù by Beno√Æt Blanchon.

Click Install (choose version 6+).

üîå Step 2: Connect ESP32 to Your PC
Use a USB cable to connect your ESP32.

Select the correct board and port:

Tools ‚Üí Board ‚Üí ESP32 Dev Module

Tools ‚Üí Port ‚Üí [your port]

üß™ Step 3: Test Serial Monitor
cpp
Copy
Edit
void setup() {
  Serial.begin(115200);
}

void loop() {
  Serial.println("Hello from ESP32");
  delay(1000);
}
‚úÖ If you see output, you're ready!

‚úÖ PART 2: Creating a Simple JSON Object
üîπ Example: Sensor ID, Temperature, Humidity
cpp
Copy
Edit
#include <ArduinoJson.h>

void setup() {
  Serial.begin(115200);

  DynamicJsonDocument doc(1024);

  doc["sensorId"] = "ESP32_01";
  doc["temperature"] = 26.7;
  doc["humidity"] = 60;

  serializeJson(doc, Serial);  // Print JSON to Serial
}

void loop() {}
üì¶ Output:
json
Copy
Edit
{"sensorId":"ESP32_01","temperature":26.7,"humidity":60}
‚úÖ PART 3: Working with Variables
cpp
Copy
Edit
float temp = 28.5;
int hum = 70;
String id = "ESP32_02";

doc["sensorId"] = id;
doc["temperature"] = temp;
doc["humidity"] = hum;
You can now dynamically fill JSON from sensor readings.

‚úÖ PART 4: Nesting Objects
cpp
Copy
Edit
doc["sensorId"] = "ESP32_03";
JsonObject readings = doc.createNestedObject("readings");
readings["temperature"] = 30.2;
readings["humidity"] = 58;
readings["soilMoisture"] = 350;
Output:
json
Copy
Edit
{
  "sensorId": "ESP32_03",
  "readings": {
    "temperature": 30.2,
    "humidity": 58,
    "soilMoisture": 350
  }
}
‚úÖ PART 5: Creating JSON Arrays
cpp
Copy
Edit
JsonArray values = doc.createNestedArray("temperatures");
values.add(26.5);
values.add(27.0);
values.add(28.3);
Output:

json
Copy
Edit
{
  "temperatures": [26.5, 27.0, 28.3]
}
‚úÖ PART 6: Sending JSON via Wi-Fi (HTTP POST)
Requirements:
WiFi.h and HTTPClient.h for network communication.

A running API endpoint to receive data (e.g., http://example.com/api/data).

cpp
Copy
Edit
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

const char* ssid = "YourWiFiName";
const char* password = "YourWiFiPassword";

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.print(".");
  }
  Serial.println("WiFi connected");

  DynamicJsonDocument doc(1024);
  doc["sensorId"] = "ESP32_01";
  doc["temperature"] = 25.6;
  doc["humidity"] = 55;

  String jsonString;
  serializeJson(doc, jsonString);

  HTTPClient http;
  http.begin("http://example.com/api/data");
  http.addHeader("Content-Type", "application/json");

  int statusCode = http.POST(jsonString);
  Serial.print("Response code: ");
  Serial.println(statusCode);

  http.end();
}

void loop() {}
‚úÖ PART 7: Deserializing JSON (Receiving Data)
cpp
Copy
Edit
String input = "{\"status\":\"OK\",\"threshold\":30}";

DynamicJsonDocument doc(512);
deserializeJson(doc, input);

String status = doc["status"];
int threshold = doc["threshold"];

Serial.println(status);
Serial.println(threshold);
‚úÖ PART 8: Tips for Optimization
Feature	Use When
StaticJsonDocument	Memory-critical apps (fixed size)
DynamicJsonDocument	Flexibility, dynamic fields
serializeJsonPretty()	For debugging readable JSON
deserializeJson()	When reading/parsing JSON input

üèÅ Summary
Step	Description
Install Library	ArduinoJson by Beno√Æt Blanchon
Create JSON Object	Use doc["key"] = value
Nest Objects	createNestedObject() / createNestedArray()
Send via HTTP	Use WiFi, HTTPClient, and serializeJson()
Receive JSON	Use deserializeJson()

